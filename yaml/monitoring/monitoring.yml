version: '3.8'

services:
  prometheus:
    image: prom/prometheus:latest
    volumes:
      - prometheus_data:/prometheus
      - ./prometheus_monitoring.yml:/etc/prometheus/prometheus.yml
      - ./alert.rules.yml:/etc/prometheus/alert.rules.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    networks:
      - monitoring
      - public
    deploy:
      placement:
        constraints: [node.role == manager]
      replicas: 1
      labels:
        traefik.enable: "true"
        traefik.http.routers.prometheus.rule: Host(`prometheus.localhost`)
        traefik.http.routers.prometheus.entrypoints: websecure
        traefik.http.routers.prometheus.tls.certresolver: leresolver
        traefik.http.services.prometheus.loadbalancer.server.port: "9090"
  
  pushgateway:
    image: prom/pushgateway:latest
    networks:
      - monitoring
    ports:
      - "9091:9091"
    deploy:
      replicas: 1
      placement:
        constraints: [node.role == manager]
      labels:
        traefik.enable: "true"
        traefik.http.routers.pushgateway.rule: Host(`pushgateway.localhost`)
        traefik.http.routers.pushgateway.entrypoints: websecure
        traefik.http.routers.pushgateway.tls.certresolver: leresolver
        traefik.http.services.pushgateway.loadbalancer.server.port: "9091"

  grafana:
    image: grafana/grafana:latest
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - monitoring
      - public
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    deploy:
      placement:
        constraints: [node.role == manager]
      replicas: 1
      labels:
        traefik.enable: "true"
        traefik.http.routers.grafana.rule: Host(`grafana.localhost`)
        traefik.http.routers.grafana.entrypoints: websecure
        traefik.http.routers.grafana.tls.certresolver: leresolver
        traefik.http.services.grafana.loadbalancer.server.port: "3000"

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - monitoring
    deploy:
      mode: global

  node-exporter:
    image: prom/node-exporter:latest
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
    networks:
      - monitoring
    deploy:
      mode: global

  metrics-collector:
    image: monitoring_collector
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - monitoring
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints: [node.role == manager]

volumes:
  prometheus_data:
  grafana_data:

networks:
  public:
    external: true
  monitoring:
    driver: overlay
