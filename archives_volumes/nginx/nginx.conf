
events {
  worker_connections  1024;
}

http{
  server {

   location = /authentification_pcap_prof {
      # Vérification de l'authentification prof - utilise en interne
      proxy_pass http://pcap-api:8000/pcap/authenticated_prof;
      proxy_pass_request_body off;
   }

   location = /authentification_pcap {
      # Vérification de l'authentification etudiant - utilise en interne
      proxy_pass http://pcap-api:8000/pcap/authenticated;
      proxy_pass_request_body off;
   }

   error_page 403 = @error403;

   # Si l'utilisateur n'a pas acces, rediriger vers page d'autentification
   location @error403 {
    return 302 /pcap/auth/login?next=$request_uri;
   }


   include       /etc/nginx/mime.types;
   listen                      80;
   server_name                 _;
   client_max_body_size        200M;
   set                         $cache_uri $request_uri;

   location                    = /favicon.ico { log_not_found off; access_log off; }
   location                    = /robots.txt  { log_not_found off; access_log off; }
   ignore_invalid_headers      on;
   add_header                  Access-Control-Allow_Origin *;

   location /static {
     # pas d'autorisation nécessaire pour les pages static
       autoindex on;
       alias /readthedocs/static;
   }

   location / {
     #  Par défaut seuls les profs ont accès à readthedocs
      auth_request /authentification_pcap_prof;
      proxy_pass http://pcap-rtd:8000;
   }

   location ~ ^/api/v2/webhook/(.*)$  {
      proxy_pass http://pcap-rtd:8000/api/v2/webhook/$1;
   }

   location /pcap/auth {
     #  Acces anonyme à la page d'authentification
      proxy_pass http://pcap-api:8000;
   }

   location /pcap/accounts {
     #  Acces anonyme à la page de registration
      proxy_pass http://pcap-api:8000;
      proxy_set_header Host $host;
   }

   location /accounts/logout/ {
      proxy_pass http://pcap-rtd:8000;
      proxy_set_header Host $host;
   }

   location /pcap/ {
     #  Par défaut seuls les profs ont accès à pcap
      auth_request /authentification_pcap_prof;
      proxy_pass http://pcap-api:8000;
   }

   location /pcap/api/tentative {
     # Tout utilisateur authentifié peut émettre une tentative

      # Appliquer ceci seulement aux POST
      limit_except POST {
         deny all;
      }

      auth_request /authentification_pcap;
      proxy_pass http://pcap-api:8000;
   }

   location /pcap/api/exercice {
     # Tout utilisateur authentifié peut récupérer les informations d'un exercice

      # Appliquer ceci seulement aux POST
      limit_except GET {
         deny all;
      }
      
      auth_request /authentification_pcap;
      proxy_pass http://pcap-api:8000;
   }

   location /pcap/user {
     # Tout utilisateur authentifié peut demander son nom user et son id
      auth_request /authentification_pcap;
      proxy_pass http://pcap-api:8000;
   }


   location /media {
     # Tout utilisateur authentifié peut accéder aux médias
       auth_request /authentification_pcap;
       autoindex on;
       alias /readthedocs/media;
   }

   location ~ ^/docs/(.*)/(en|fr)/([^/]*)/(.*)$  {
     # Tout utilisateur authentifié peut accéder aux cours
      auth_request /authentification_pcap;
      autoindex on;
      alias /readthedocs/user_builds/$1/artifacts/$3/sphinx/$4;
   }

   location /etu {
     # Tout utilisateur authentifié peut accéder aux liste des cours
      auth_request /authentification_pcap;
      proxy_pass http://pcap-rtd:8000;
   }

   location /convergence/api/realtime/ {
     # Tout utilisateur authentifié peut utiliser convergence
      auth_request /authentification_pcap;
      proxy_pass http://pcap-convergence:8080/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header X-Forwarded-For $remote_addr;
      proxy_read_timeout 60m;
      proxy_send_timeout 60m;
   }

   access_log                  /var/log/nginx/access.log;
   error_log                   /var/log/nginx/error.log;
}
}